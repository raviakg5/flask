name: Build, Push Docker Image, and Deploy to Kubernetes

on:
  push:
    branches:
      - main  # Trigger on push to the main branch
  pull_request:
    branches:
      - main  # Trigger on PRs to the main branch

jobs:
  build:
    runs-on: ubuntu-latest  # Run on Ubuntu

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 3: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 4: Build Docker Image
      - name: Build Docker Image
        run: |
          docker build -t docker.io/${{ secrets.DOCKER_USERNAME }}/flask-app-repo:latest .
          docker tag flask-app-repo:latest docker.io/${{ secrets.DOCKER_USERNAME }}/flask-app-repo:latest

      # Step 5: Push Docker Image to Docker Hub
      - name: Push Docker Image to Docker Hub
        run: |
          docker push docker.io/${{ secrets.DOCKER_USERNAME }}/flask-app-repo:latest

      # Step 6: Set up Kubernetes (Kubectl) on the GitHub Runner
      - name: Set up Kubernetes CLI
        uses: azure/setup-kubectl@v1
        with:
          kubeconfig: ${{ secrets.KUBECONFIG }}

      # Step 7: Update Kubernetes Deployment (replace image)
      - name: Update Kubernetes Deployment with New Image
        run: |
          kubectl set image deployment/flask-app-deployment flask-app=docker.io/${{ secrets.DOCKER_USERNAME }}/flask-app-repo:latest
          
      # Step 8: Apply Changes to Kubernetes Cluster
      - name: Apply Kubernetes Configuration
        run: |
          kubectl apply -f deployment.yaml  # Update this path if needed
          kubectl rollout status deployment/flask-app-deployment  # Wait for deployment to finish

      # Step 9: Expose Service (if necessary, depending on your cluster setup)
      - name: Expose Service to Access the App (Optional)
        run: |
          kubectl expose deployment flask-app-deployment --type=LoadBalancer --name=flask-app-service
